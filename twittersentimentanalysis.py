# -*- coding: utf-8 -*-
"""TwitterSentimentAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LRSNIeYUd1sHPx33v8AbpcpeCPSivOXp
"""

# Description This is a sentiment analysis programe that parses the tweets fetched from twitter using python

#Import Libraries
import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#load the data
from google.colab import files 
uploaded = files.upload()

# Get the data
log = pd.read_csv('Login (4).csv')

#Twitter API credentials
consumerKey = log['key'][0]
consumerSecret = log['key'][1]
accessToken = log['key'][2]
accessTokenSecret = log['key'][3]

# Create the authentication object
authenticate = tweepy.OAuthHandler(consumerKey,consumerSecret) 
authenticate.set_access_token(accessToken,accessTokenSecret)
api=tweepy.API(authenticate,wait_on_rate_limit=True)

#Extract 100 tweets from the twitter user
posts=api.user_timeline(screen_name="UN" , count=5000 , lang = "en" , tweet_mode ="extended")

#print the last 5 tweets from account
print("Show the last 5 tweets : \n")
i=1
for tweet in posts[0:5]:
  print(str(i) + ') ' +tweet.full_text + '\n')
  i = i+1

# Create a dataframe with a column called Tweets
df = pd.DataFrame([tweet.full_text for  tweet in posts] , columns=['Tweets'] )

# Show the first 5 rows of data
df.head()

#Clean the text
#Create a function to clean the tweets
def cleanTxt(text):
  text=re.sub(r'@[A-Za-z0-9]','', text) # Removed @ metion
  text=re.sub(r'#','',text) #Removing the '#' symbol
  text=re.sub(r'RT[\s]+' , '', text) #Removing RT
  text=re.sub(r'htttps?:\/\/\s+','',text) #Removing the hyper link

  return text

#Cleaning the Text
df['Tweets']=df['Tweets'].apply(cleanTxt)

#Show the cleaned text
df

# Create a function to get the subjectivity
def getSubjectivity(text):
  return TextBlob(text).sentiment.subjectivity

#Create a function to get the polarity
def getPolarity(text):
  return TextBlob(text).sentiment.polarity
#Create two new columns
df['Subjectivity'] = df['Tweets'].apply(getSubjectivity)
df['Polarity'] = df['Tweets'].apply(getPolarity)

#Show new dataframe with new columns
df

# Plot the word Cloud
allWords=' '.join([twts for twts in df['Tweets']])
wordCloud = WordCloud(width=500 , height=300 , random_state = 21 , max_font_size = 119).generate(allWords)

plt.imshow(wordCloud, interpolation = "none")
plt.axis('off')
plt.show()

# Create a function to compute the negative , neutral and positive analysis
def getAnalysis(score):
  if score < 0:
    return 'Negative'
  elif score == 0:
    return 'Neutral'
  else:
    return 'Positive'

df['Analysis'] = df['Polarity'].apply(getAnalysis)
#Show Data Frame
df

# Print all of the positive tweets
j=1
sortedDF = df.sort_values(by=['Polarity'])
for i in range(0 , sortedDF.shape[0]):
  if(sortedDF ['Analysis'][i] == 'Positive'):
    print(str(j) + ') ' +sortedDF['Tweets'][i])
    print()
    j=j+1

#print the negative tweets
j=1
sortedDF = df.sort_values(by= ['Polarity'] ,ascending= 'False')
for i in range(0, sortedDF.shape[0]):
  if (sortedDF['Analysis'][i] == 'Negative'):
    print(str(j) + ') ' + sortedDF['Tweets'][i])
    print ()
    j = j+1

# Plot the polarity and subjctivity
plt.figure(figsize = (8,6))
for i in range(0, df.shape[0]):
  plt.scatter(df['Polarity'][i], df['Subjectivity'][i], color='Blue')

plt.title('Sentiment Analysis')
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.show()

#Get the percentage of positive tweets
ptweets = df[df.Analysis == 'Positive']
ptweets = ptweets['Tweets']
round((ptweets.shape[0] / df.shape[0]) *100, 1)

# Get the percentage of negative tweeets
ntweets = df[df.Analysis == 'Negative']
ntweets = ntweets['Tweets']

round((ntweets.shape[0] / df.shape[0]) *100 , 1)

# Show the value counts
df['Analysis'].value_counts()
#plot and visualize the counts
plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')
df['Analysis'].value_counts().plot(kind='bar')
plt.show()

